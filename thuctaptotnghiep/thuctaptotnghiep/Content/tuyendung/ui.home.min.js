$(function () {

	// Init Scroll Bar
	$('.scrollbar').mCustomScrollbar({
		theme: 'home-vnw',
		mouseWheelPixels: 300,
		scrollButtons: {enable: true, scrollSpeed: 'auto'},
		advanced: {updateOnBrowserResize: true, updateOnContentResize: true}
	});

	// Init Select2
	/*
	 $('.select-location, .select-category').each(function () {
	 $(this).select2({
	 'width': '100%',
	 adaptContainerCssClass: function (c) {
	 return null;
	 }
	 }).select2SelectAll();
	 });
	 */
	// $('.select-level').select2({
	//     'width': '100%', adaptContainerCssClass: function (c) {
	//         return null;
	//     }
	// });

});

/* ----------------------------------------------- */
/* Collapse - Expand Marketing Bottom Right Popup  */
/* ----------------------------------------------- */
$(function () {
	var $moveup_toggle = $('.move-up-banner .toggle-button');
	var $moveup_banner = $('.move-up-banner');
	var gblnToggleIsClicked = false;
	var gblnCurrentlyShown = true;
	var gblnBeforeExpiry = true;
	var gintExpiry = 7; //This is the number of days before the LocalStorage Key "bottomPopupVisibleState" expires
	var objDate = new Date();

	function setLocalStorage(key, value) {
		jQuery.cookie(key, value);
	}

	function getLocalStorage(key) {
		return jQuery.cookie(key);
	}

	// Predefined functions
	function setBottomPopupVisibleStateTrue() {
		setLocalStorage("bottomPopupVisibleState", 'true');
	}

	function setBottomPopupVisibleStateFalse() {
		setLocalStorage("bottomPopupVisibleState", 'false');
		setLocalStorage("bottomPopupVisibleCloseTime", objDate.getTime());
	}

	function expandBottomPopup() {
		$moveup_banner.removeClass('out').animate({'bottom': '-300px'}, 200).find('.banner-content a').fadeIn('fast').promise().done(function () {
			gblnToggleIsClicked = false;
		});
		$moveup_toggle.addClass('icon-close-inverse-black').removeClass('icon-expand-inverse-black');
		setBottomPopupVisibleStateTrue();
	}

	function collapseBottomPopup() {
		$moveup_banner.addClass('out').find('.banner-content a').fadeOut('fast').end().animate({'bottom': '-345px'}, 200);
		$moveup_toggle.removeClass('icon-close-inverse-black').addClass('icon-expand-inverse-black');
		setBottomPopupVisibleStateFalse();
	}

	function collapseBottomPopupImmediately() {
		//This is exactly the same as collapseBottomPopup() but there is no transition.
		$moveup_banner.addClass('out').find('.banner-content a').hide().end().css({'bottom': '-345px'});
		$moveup_toggle.removeClass('icon-close-inverse-black').addClass('icon-expand-inverse-black');
	}

	// Check the expiration status of the popup
	if (getLocalStorage("bottomPopupVisibleCloseTime") === null) {
		gblnBeforeExpiry = false;
	} else {
		if (objDate.getTime() - getLocalStorage("bottomPopupVisibleCloseTime") < (gintExpiry * 86400000)) {
			gblnBeforeExpiry = true;
		} else {
			gblnBeforeExpiry = false;
		}
	}

	// Process this varialbe "gblnCurrentlyShown": Check localStorage/cookie to see if it was set to true or false the last time, and must less before expiration


	if (getLocalStorage("bottomPopupVisibleState") === null) {
		gblnCurrentlyShown = true;
	} else {
		if (gblnBeforeExpiry == true) {
			if (getLocalStorage("bottomPopupVisibleState") == "true") {
				gblnCurrentlyShown = true;
			} else {
				gblnCurrentlyShown = false;
			}
		} else {
			gblnCurrentlyShown = true;
		}
	}
	// After processing, open the bottom popup if "gblnCurrentlyShown" is "true", close the popup if it's false.
	if (gblnCurrentlyShown == true) {
		expandBottomPopup();
	} else {
		collapseBottomPopupImmediately();
	}

	var hoverIntentTimer, hoverOutIntentTimer; //If user hover over the popover over than a specific time i.e. 300ms, this means they really want to hover over it.
	var isHovered = false;
	$('.move-up-banner img').hover(function () {
		if (isHovered == false) {
			hoverIntentTimer = setTimeout(function () {
				$moveup_banner.stop(true, false).animate({'bottom': 0}, 'fast');
				$moveup_banner.addClass('in');
				isHovered = true;
			}, 300)
		} else {
			clearTimeout(hoverOutIntentTimer);
		}
	}, function () {
		clearTimeout(hoverIntentTimer);
		if (isHovered == true) {
			hoverOutIntentTimer = setTimeout(function () {
				if ($('.move-up-banner .toggle-button:hover').length == 0) {
					$moveup_banner.stop(true, false).animate({'bottom': -300}, 'fast');
					$moveup_banner.removeClass('in');
					isHovered = false;
				}
			}, 300)
		}
	});
	$moveup_toggle.mouseleave(function () {
		if ($moveup_banner.hasClass('in') && (gblnToggleIsClicked == false)) {
			$moveup_banner.removeClass('in').stop(true, false).animate({'bottom': '-300px'}, 'fast');
		}
	});

	$moveup_toggle.click(function () {
		gblnToggleIsClicked = true;
		if (!$moveup_banner.hasClass('out')) {
			collapseBottomPopup();
		} else {
			expandBottomPopup();
		}
	});

	// Check if OS is window/mac. Move the popup to the left 20px to avoid the scroll bar to avoid the scroll bar covers the button.
	if (navigator.appVersion.indexOf("Mac") != -1) {
		$('.move-up-banner').css('right', '20px');
	}

	//Detect Chrome for Chrome Extension link
	var isOpera = !!window.opera || navigator.userAgent.indexOf(' OPR/') >= 0;
	var isChrome = !!window.chrome && !isOpera;

	if (isChrome === false) {
		$('#openChromeExtension').addClass('hidden');
	}

});

// Rotate Ads
var rotateSquareBanner = function (rotationTime) {
	$('.b-item').each(function () {
		var $self = $(this);
		var firstItem = $(this).find('img:first');
		setInterval(function () {
			var currentShownItem = $self.find('img:visible');
			var nextItem = currentShownItem.next('img');
			currentShownItem.hide().promise().done(function () {
				if (nextItem.length > 0) {
					nextItem.show();
				} else {
					firstItem.show();
				}
			});
		}, rotationTime);
	})
};

// Top Banner
$(function () {
	setTimeout(function () {
		if (!getCookie('doNotShowTopBanner')) {
			var $jsTopBanner = $('.js-top-banner');
			$jsTopBanner.slideDown('fast').find('.close').click(function (e) {
				e.stopPropagation();
				setCookie('doNotShowTopBanner', true, 7);
				$(this).closest('.js-top-banner').stop().slideUp('fast');

			});

			// $jsTopBanner.click(function () {
			//     $(this).find("a").simulate("click")
			// });
		}
	}, 500)
});


// ============================================================
// GeoCoder: Get user location
// ============================================================
var geoCoder = {
	init: function () {
		"use strict";
		this.$locationSelect = $('.select-location');
		this.getLocation();
	},

	setCookie(name, value, days) {
		if (days) {
			var date = new Date();
			date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
			var expires = "; expires=" + date.toGMTString();
		}
		else var expires = "";
		document.cookie = name + "=" + value + expires + "; path=/";
	},
	getCookie(name){
		"use strict";
		var nameEQ = name + "=";
		var ca = document.cookie.split(';');
		for (var i = 0; i < ca.length; i++) {
			var c = ca[i];
			while (c.charAt(0) == ' ') c = c.substring(1, c.length);
			if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);
		}
		return null;
	},

	setup: function () {
		"use strict";

		// If users do not have location
		var cookieVNWSearchJobCity = geoCoder.getCookie('VNWSearchJob[city]');
		if (cookieVNWSearchJobCity === "-1" || !cookieVNWSearchJobCity) {
			// Only get location if this has not occurred in the last 7 days 
			var cookieGeoAllowed = geoCoder.getCookie('geoAllowed');
			if (!cookieGeoAllowed) {
				geoCoder.init();
			}

		}

	},

	getLocation: function () {
		"use strict";

		var self = this;

		var showPosition = function (position) {
			self.thisPosition = position;
			var long = position.coords.longitude;
			var lat = position.coords.latitude;
			self.setCookie('geoAllowed', true, 7);
			self.geoCodeLatLong(lat, long);

		};

		var errorLocationCallback = function (error) {
			self.setCookie('geoAllowed', false, 7)
		};

		function getLocation() {
			if (navigator.geolocation) {
				navigator.geolocation.getCurrentPosition(showPosition, errorLocationCallback);
			} else {
				console.log("Geolocation is not supported by this browser.");
			}
		}

		getLocation();
	},

	geoCodeLatLong: function (lat, long) {
		"use strict";

		var self = this;
		var geocoder = new google.maps.Geocoder;
		var latlng = {lat: lat, lng: long};

		geocoder.geocode({'location': latlng}, function (results, status) {
			if (status === 'OK') {
				var addressIndex = results[0].address_components.length - 2;
				var foundCityName = results[0].address_components[addressIndex].long_name;
				self.setLocation(foundCityName);
			} else {
				console.log('Geocoder failed due to: ' + status);
			}
		});

	},

	setLocation: function (foundCityName) {
		"use strict";
		var self = this;
		var $locationSelect = this.$locationSelect;

		if ($('html').attr('lang') === "en") {
			foundCityName = self.convertToASCII(foundCityName);
		}

		var selectID = $locationSelect.find('option').filter(function () {
			if ($(this).text().trim() === foundCityName) {
				return true;
			}
		}).attr('value');

		// Huế is a special name; sometimes it's Thừa Thiên Huế, sometimes it's Thừa Thiên - Huế;
		// Our system return "Thua Thien-Hue", the below code snippet is to make sure that "Thua Thien Hue" will also match

		if (foundCityName === "Thừa Thiên Huế" || foundCityName === "Thua Thien Hue") {
			selectID = 57;
		}

		if (!!selectID) {
			$locationSelect.select2('val', selectID);
			geoCoder.setCookie('VNWSearchJob[city]', selectID, 365)
		}

	},

	convertToASCII: function (string) {
		"use strict";

		var regexPatternA = /[aáàảãạăắằẳẵặâấầẩẫậ]/g,
			regexPatternI = /[iíìỉĩị]/g,
			regexPatternU = /[uúùủũụưứừửữự]/g,
			regexPatternE = /[eéèẻẽẹêếềểễệ]/g,
			regexPatternO = /[oóòỏõọôốồổỗộơớờởỡợ]/g,
			regexPatternD = /[Đ]/g;

		return string
			.replace(regexPatternA, 'a')
			.replace(regexPatternI, 'i')
			.replace(regexPatternU, 'u')
			.replace(regexPatternE, 'e')
			.replace(regexPatternO, 'o')
			.replace(regexPatternD, 'D')
	}
};

var initMap = geoCoder.setup;
// GeoCoder: Get user location //====================